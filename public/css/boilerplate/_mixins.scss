/*
    Document   : _mixins.scss
    Created on : 13-mar-2013, 11.38.18
    Author     : Stefano Torresi (http://stefanotorresi.it)
    Description:
                various SASS mixins
*/

@function em($target, $context: $basesize) {
  @return ($target / $context) * 1em;
}

@mixin border-radius($radius: 10) {
  border-radius: #{$radius}px;
  -moz-border-radius: #{$radius}px;
  -webkit-border-radius: #{$radius}px;
}

@mixin box-shadow($prop) {
  box-shadow: $prop;
  -moz-box-shadow: $prop;
  -webkit-box-shadow: $prop;
}

@mixin box-sizing($prop) {
  box-sizing: $prop;
  -moz-box-sizing: $prop;
  -webkit-box-sizing: $prop;
}

@mixin text-shadow($prop) {
  text-shadow: $prop;
  -moz-text-shadow: $prop;
  -webkit-text-shadow: $prop;
}

@mixin background-alpha($color, $alpha) {
  $rgba: rgba($color, $alpha);
  $ie-hex-str: ie-hex-str($rgba);
  background-color: transparent;
  background-color: $rgba;
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
  zoom: 1;
}

@mixin opacity ( $value: 0.5 ) {
  opacity: $value;
  -moz-opacity: $value;
  -khtml-opacity: $value;
  filter: alpha(opactiy=($value * 100));
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$value * 100})";
  zoom: 1;
}

@mixin transition($prop) {
  transition: $prop;
  -moz-transition: $prop; /* Firefox 4 */
  -webkit-transition: $prop; /* Safari and Chrome */
  -o-transition: $prop;
}

@mixin transition-prop($prop-name, $value) {
  transition-#{$prop-name}: $value;
  -moz-transition-#{$prop-name}: $value;
  -webkit-transition-#{$prop-name}: $value;
  -o-transition-#{$prop-name}: $value;
}

@mixin linear-gradient($from, $to, $ie: 0) {
  @if $ie != 1 { background-color: $to; }

  background-image: -webkit-gradient(linear,left top,left bottom,color-stop(0, $from),color-stop(1, $to));
  background-image: -webkit-linear-gradient(top, $from, $to);
  background-image: -moz-linear-gradient(top, $from, $to);
  background-image: -ms-linear-gradient(top, $from, $to);
  background-image: -o-linear-gradient(top, $from, $to);
  background-image: linear-gradient(top, bottom, $from, $to);

  @if $ie == 1 {
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
    -ms-filter: 'progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}'))';
  }
}

@mixin arrow($direction, $color, $size){
  display: block;
  height: 0;
  width: 0;

  @if $direction == 'top' {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  } @else if $direction == 'right' {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  } @else if $direction == 'bottom' {
    border-top: $size solid $color;
    border-right: $size solid transparent;
    border-left: $size solid transparent;
  } @else if $direction == 'left' {
    border-top: $size solid transparent;
    border-right: $size solid $color;
    border-bottom: $size solid transparent;
  } @else if $direction == 'top-left' {
    border-top: $size solid $color;
    border-right: $size solid transparent;
  } @else if $direction == 'top-right' {
    border-top: $size solid $color;
    border-left: $size solid transparent;
  } @else if $direction == 'bottom-left' {
    border-bottom: $size solid $color;
    border-right: $size solid transparent;
  } @else if $direction == 'bottom-right' {
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
  }
}

@mixin respond-to($media) {
  $widescreen: 1200px;
  $desktop: 980px;
  $tablet: 768px;
  $phone: 480px;

  @if $media == widescreen {
  /* Large desktop */
    @media only screen and (min-width: $widescreen) { @content; }
  }
  @else if $media == smaller-than-desktop {
    @media only screen and (max-width: $desktop - 1) { @content; }
  }
  @else if $media == tablet {
  /* Portrait tablet to landscape and desktop */
    @media only screen and (min-width: $tablet + 1) and (max-width: $desktop - 1) { @content; }
  }
  @else if $media == smaller-than-tablet {
  /* Landscape phone to portrait tablet */
    @media only screen and (max-width: $tablet - 1) { @content; }
  }
  @else if $media == phone {
  /* Landscape phones and down */
    @media only screen and (max-width: $phone) { @content; }
  }
}
